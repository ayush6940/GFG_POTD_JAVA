import java.util.*;

class Solution {
    public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        ArrayList<Integer> result = new ArrayList<>();
        Deque<Integer> deque = new LinkedList<>(); // Stores indices of elements
        
        for (int i = 0; i < arr.length; i++) {
            // Remove elements from front if they are out of this window
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
                deque.poll();
            }
            
            // Remove elements from back if they are smaller than current element
            while (!deque.isEmpty() && arr[deque.peekLast()] < arr[i]) {
                deque.pollLast();
            }
            
            // Add current element index to deque
            deque.offer(i);
            
            // The first index we can start adding results
            if (i >= k - 1) {
                result.add(arr[deque.peek()]);
            }
        }
        
        return result;
    }
}
